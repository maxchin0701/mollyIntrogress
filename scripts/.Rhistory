#load data for current sample
muDCR <- read.delim(paste0("../outputs/gcnv/rawCalls/",
intervalSize,
"/SAMPLE_",j-1,"/mu_denoised_copy_ratio_t.tsv"),
sep="\t",row.names = NULL)
muDCR <- as.numeric(muDCR[4:nrow(muDCR),1])
intervalCNVs <- cbind(intervals,muDCR)
colnames(intervalCNVs) <- c("scaff","start","end","muDCR")
#subset to scaffold of interest
intervalCNVs <- subset(intervalCNVs,scaff==introgressScaffs[i])
#extract position, copy number, and sample
for(k in 1:nrow(intervalCNVs)){
pos[[length(pos) + 1]] <- mean(c(intervalCNVs$start[k],
intervalCNVs$end[k]))
samp[[length(samp) + 1]] <- samps[j]
cn[[length(cn) + 1]] <- intervalCNVs$muDCR[k]
}
}
#bind lists
dat <- as.data.frame(cbind(do.call(rbind,pos),
do.call(rbind,cn),
do.call(rbind,samp)),)
colnames(dat) <- c("pos","cn","samp")
dat$pos <- as.numeric(dat$pos)
dat$cn <- as.numeric(dat$cn)
dat$samp <- as.factor(dat$samp)
#clean up
rm(pos,samp,cn,intervalCNVs)
#### PLOT ####
#set xlims if necessary
if(intervalSize == "1kb" &&
max(dat$pos) >= 1000000){
introgressRegionsDf <- data.frame()
for(j in 1:length(introgressRegionsAll)){
introgressRegionsDf <- rbind(introgressRegionsDf,introgressRegionsAll[[j]])
}
introgressRegionsDf <- subset(introgressRegionsDf,scaff==introgressScaffs[i])
xmin <- min(as.numeric(introgressRegionsDf$start)) - 100000
xmax <- max(as.numeric(introgressRegionsDf$end)) + 100000
if(xmin < 0){
xmin <- 0
}
if(xmax > max(dat$pos)){
xmax <- max(dat$pos)
}
} else {
xmin <- 0
xmax <- max(dat$pos)
}
if(intervalSize == "1kb"){
curScaff <- ggplot(data=dat,aes(x=pos,y=cn))+
geom_line(mapping=aes(color=dat$samp))+
scale_color_viridis_d()+
labs(color=introgressScaffs[i])+
ylab("Copy number")+
xlab("Position")+
ylim(0,10)+
xlim(xmin,xmax)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background= element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y = element_text(size = 10),
axis.title = element_text(face = "bold",
size = 10),
legend.title = element_text(face = "bold",
size = 10),
legend.key=element_blank(),
plot.title = element_text(face = "bold",
size = 17,
hjust=0.5))
} else {
curScaff <- ggplot(data=dat,aes(x=pos,y=cn))+
geom_line(mapping=aes(color=dat$samp))+
scale_color_viridis_d()+
labs(color=introgressScaffs[i])+
ylab("Copy number")+
xlab("Position")+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background= element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y = element_text(size = 10),
axis.title = element_text(face = "bold",
size = 10),
legend.title = element_text(face = "bold",
size = 10),
legend.key=element_blank(),
plot.title = element_text(face = "bold",
size = 17,
hjust=0.5))
}
#### SAVE PLOT ####
ggsave(curScaff,
filename = paste0("../figures/introgressScaffolds/",
intervalSize,
"/",
introgressScaffs[i],
".pdf"),
width = 7.47,
height = 4.90,
units = "in")
}
setwd("~/Documents/My stuff/Blackmon + Rosenthal Lab Stuff/excess.fusions/scripts/toy")
# This script builds our model for karyotypic evolution and estimates
# rates for the parameters using an MCMC
#### PACKAGES ####
library(phytools)
library(ape)
library(chromePlus)
library(diversitree)
#### BUILD TEST TREE AND TEST DATASET ####
# tree <- rcoal(20)
# dat <- as.data.frame(matrix(data=c(tree$tip.label,
#                                    sample(x=1:10,size=20,replace=T),
#                                    sample(c("fused","unfused"),size=20,replace=T)),
#                             ncol=3,
#                             byrow = F))
# colnames(dat) <- c("tree.name","hapauto","scs")
# tree$edge.length <- tree$edge.length/max(branching.times(tree))
# write.nexus(tree,file="../../data/toy/tree.nex")
# write.csv(dat,file="../../data/toy/dat.csv",row.names = F)
########## START HERE #############
#change to your tree and csv files, change toy directory to your clade directory
dat <- read.csv("../../data/toy/dat.csv",
as.is=T)
#make sure to check your tree is utlrametric
tree <- force.ultrametric(tree = read.tree("../../data/toy/tree.nex"),
method = "extend")
#the follwing lines convert the edge lengths of the tree to unit length and
#save the unit length tree
tree$edge.length <- tree$edge.length/max(branching.times(tree))
write.tree(tree,file="../../data/toy/tree.nex") #change the directory accordingly
#make sure your tip states and tree are pruned to one another here, and that your
#tip states are in the same order that your tree tip labels are in
#### BUILD MODEL ####
#Convert codedSCS column to right format
# replace "fused" with whatever sex chromosome system you think is the fused state
# e.g, XY for XO/XY and NeoXY for XY/NeoXY
for(i in 1:nrow(dat)){
if(dat$scs[i] ==  "fused"){
dat$scs[i] <- 0
} else {
dat$scs[i] <- 1
}
}
dat$scs <- as.numeric(dat$scs)
#Convert to data matrix
data.matrix <- datatoMatrix(dat,
c(min(dat$hapauto),max(dat$hapauto)),
hyper = T)
#Make mkn model
model <- make.mkn(tree,
data.matrix,
ncol(data.matrix),
strict=F,
control=list(method="ode"))
#Constrain model
model.con <- constrainMkn(data.matrix,
model,
hyper = T,
polyploidy = F,
verbose = T,
constrain = list(saf.model=T,
sym.hyperstates=T))
#extract parameter matrix
parMat <- mat <- model.con$`parameter matrix`
#### ESTIMATE RATES ####
#test run MCMC
temp.mcmc <- diversitree::mcmc(lik=model.con$`likelihood function`,
x.init=runif(4,0,1),
prior=make.prior.exponential(r=0.5),
#upper=c(100,100,100,100),
nsteps = 100,
w=1)
plot(x=temp.mcmc$i,y=temp.mcmc$p,type='l')
temp.mcmc <- temp.mcmc[-c(1:50), ]
w <- diff(sapply(temp.mcmc[2:5],
quantile, c(.05, .95)))
#run MCMC
model.mcmc <- diversitree::mcmc(lik=model.con$`likelihood function`,
x.init=runif(4,0,1),
prior=make.prior.exponential(r=0.5),
#upper=c(100,100,100,100),
nsteps = 500,
w=w)
plot(x=model.mcmc$i,y=model.mcmc$p,type='l')
setwd("~/Documents/My stuff/Laskowski Lab Stuff/Introgression Work/scripts")
i=1
#### PACKAGES ####
library(ggplot2)
#### LOAD LIST OF INTRGORESSED REGIONS ####
load("../outputs/gcnv/introgressList.RData")
#### SET INTERVAL SIZE  ####
intervalSize <- "1kb"
#### READ IN INTERVALS ####
#change this depending on if youre looking at 1kb vs 10kb intervals
intervals <- read.delim(paste0("../data/refGenome/PFo",intervalSize,".bed"),
sep="\t",row.names = NULL,header = F)
#### COLLECT SAMPLE NAMES ####
samps <- c()
sampDirs <- list.dirs(path='../outputs/gcnv')[-1]
for(i in 1:length(sampDirs)){
if(strsplit(sampDirs[i],split="/")[[1]][4] == "rawCalls"){
next()
}
samps <- c(samps,strsplit(sampDirs[i],split="/")[[1]][4])
}
rm(sampDirs,i)
#### GET LIST OF ALL SCAFFOLDS THAT HAVE BEEN INTROGRESSED ####
introgressScaffs <- c()
#use for loop to gather scaffold names
for(i in 1:length(introgressRegionsAll)){
introgressScaffs <- c(introgressScaffs, introgressRegionsAll[[i]]$scaff)
}
#keep only those that are unique
introgressScaffs <- unique(introgressScaffs)
i=1
#### BUILD LONG FORMAT DATA FOR CURRENT SCAFFOLD ####
#lists
pos <- list()
cn <- list()
samp <- list()
#loop through samples
for(j in 1:length(samps)){
#load data for current sample
muDCR <- read.delim(paste0("../outputs/gcnv/rawCalls/",
intervalSize,
"/SAMPLE_",j-1,"/mu_denoised_copy_ratio_t.tsv"),
sep="\t",row.names = NULL)
muDCR <- as.numeric(muDCR[4:nrow(muDCR),1])
intervalCNVs <- cbind(intervals,muDCR)
colnames(intervalCNVs) <- c("scaff","start","end","muDCR")
#subset to scaffold of interest
intervalCNVs <- subset(intervalCNVs,scaff==introgressScaffs[i])
#extract position, copy number, and sample
for(k in 1:nrow(intervalCNVs)){
pos[[length(pos) + 1]] <- mean(c(intervalCNVs$start[k],
intervalCNVs$end[k]))
samp[[length(samp) + 1]] <- samps[j]
cn[[length(cn) + 1]] <- intervalCNVs$muDCR[k]
}
}
#bind lists
dat <- as.data.frame(cbind(do.call(rbind,pos),
do.call(rbind,cn),
do.call(rbind,samp)),)
colnames(dat) <- c("pos","cn","samp")
dat$pos <- as.numeric(dat$pos)
dat$cn <- as.numeric(dat$cn)
dat$samp <- as.factor(dat$samp)
#clean up
rm(pos,samp,cn,intervalCNVs)
#### PLOT ####
#set xlims if necessary
if(intervalSize == "1kb" &&
max(dat$pos) >= 1000000){
introgressRegionsDf <- data.frame()
for(j in 1:length(introgressRegionsAll)){
introgressRegionsDf <- rbind(introgressRegionsDf,introgressRegionsAll[[j]])
}
introgressRegionsDf <- subset(introgressRegionsDf,scaff==introgressScaffs[i])
xmin <- min(as.numeric(introgressRegionsDf$start)) - 100000
xmax <- max(as.numeric(introgressRegionsDf$end)) + 100000
if(xmin < 0){
xmin <- 0
}
if(xmax > max(dat$pos)){
xmax <- max(dat$pos)
}
} else {
xmin <- 0
xmax <- max(dat$pos)
}
ggplot(data=dat,aes(x=pos,y=cn))+
geom_line(mapping=aes(color=dat$samp))+
scale_color_viridis_d()+
labs(color=introgressScaffs[i])+
ylab("Copy number")+
xlab("Position")+
ylim(0,10)+
xlim(xmin,xmax)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background= element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y = element_text(size = 10),
axis.title = element_text(face = "bold",
size = 10),
legend.title = element_text(face = "bold",
size = 10),
legend.key=element_blank(),
plot.title = element_text(face = "bold",
size = 17,
hjust=0.5))
ggplot(data=dat,aes(x=dat$samp,y=cn))+
geom_boxplot(mapping=aes(color=dat$samp))+
scale_color_viridis_d()+
labs(color=introgressScaffs[i])+
ylab("Copy number")+
xlab("Position")+
ylim(0,10)+
xlim(xmin,xmax)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background= element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y = element_text(size = 10),
axis.title = element_text(face = "bold",
size = 10),
legend.title = element_text(face = "bold",
size = 10),
legend.key=element_blank(),
plot.title = element_text(face = "bold",
size = 17,
hjust=0.5))
ggplot(data=dat,aes(x=samp,y=cn))+
geom_boxplot(mapping=aes(color=dat$samp))+
scale_color_viridis_d()+
labs(color=introgressScaffs[i])+
ylab("Copy number")+
xlab("Position")+
ylim(0,10)+
xlim(xmin,xmax)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background= element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y = element_text(size = 10),
axis.title = element_text(face = "bold",
size = 10),
legend.title = element_text(face = "bold",
size = 10),
legend.key=element_blank(),
plot.title = element_text(face = "bold",
size = 17,
hjust=0.5))
View(dat)
ggplot(data=dat,aes(x=samp,y=cn))+
geom_boxplot(mapping=aes(color=dat$samp))+
scale_color_viridis_d()+
labs(color=introgressScaffs[i])+
ylab("Copy number")+
xlab("Position")+
ylim(0,10)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background= element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y = element_text(size = 10),
axis.title = element_text(face = "bold",
size = 10),
legend.title = element_text(face = "bold",
size = 10),
legend.key=element_blank(),
plot.title = element_text(face = "bold",
size = 17,
hjust=0.5))
ggplot(data=dat,aes(x=samp,y=cn))+
geom_boxplot(mapping=aes(color=dat$samp))+
scale_color_viridis_d()+
labs(color=introgressScaffs[i])+
ylab("Copy number")+
xlab("Position")+
ylim(1.5,4)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background= element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y = element_text(size = 10),
axis.title = element_text(face = "bold",
size = 10),
legend.title = element_text(face = "bold",
size = 10),
legend.key=element_blank(),
plot.title = element_text(face = "bold",
size = 17,
hjust=0.5))
View(dat)
j=1
introgressRegionsDf <- data.frame()
for(j in 1:length(introgressRegionsAll)){
introgressRegionsDf <- rbind(introgressRegionsDf,introgressRegionsAll[[j]])
}
View(introgressRegionsDf)
introgressRegionsDf$end - introgressRegionsDf$start
as.numeric(introgressRegionsDf$end) - as.numeric(introgressRegionsDf$start)
setwd("~/Documents/My stuff/proutFest20203")
setwd("~/Documents/My stuff/proutFest20203")
#### READ TREE ####
tree <- read.nexus(file="bbmemetree.nex")
View(tree)
plot(tree)
?chronos
#### CHRONOS ####
ult.tree <- chronos(tree)
plot(ult.tree)
?plot.phylo
plot(ult.tree,show.tip.label = F)
plot(ult.tree)
plot(ult.tree,show.tip.label = F)
sim(c(0,1),100)
sample(c(0,1),21)
sample(c(0,1),21,replace=T)
sample(c(0,1),21,replace=T) -> chars
names(chars) <- tree$tip.label
sample(c(0,1),22,replace=T) -> chars
names(chars) <- tree$tip.label
test <- make.simmap(ult.tree,chars)
plot(test)
#### PACKAGES ####
library(phytools)
library(ape)
#### READ TREE ####
tree <- read.nexus(file="bbmemetree.nex")
setwd("~/Documents/My stuff/proutFest20203")
#### PACKAGES ####
library(phytools)
library(ape)
#### READ TREE ####
tree <- read.nexus(file="bbmemetree.nex")
plot(tree)
#### CHRONOS ####
ult.tree <- chronos(tree)
plot(ult.tree,show.tip.label = F)
plot(ult.tree)
View(introgressRegionsAll)
plot(test,type="fan")
add.simmap.legend(leg=c("0,1"),c("black" "#DF536B"))
add.simmap.legend(leg=c("0,1"),c("black","#DF536B"))
add.simmap.legend(leg=c("0","1"),c("black","#DF536B"))
test <- make.simmap(ult.tree,chars)
plot(test)
plot(test,type="fan")
add.simmap.legend(leg=c("0","1"),c("black","#DF536B"))
which(ult.tree$tip.label == "taco_cabana")
ult.tree$tip.label[6] <- "taco_cabeza"
test <- make.simmap(ult.tree,chars)
plot(test,type="fan")
names(chars) <- ult.tree$tip.label
View(ult.tree)
tree$tip.label
ult.tree$tip.label
test <- make.simmap(ult.tree,chars)
plot(test,type="fan")
plot(test,type="fan",show.tip.label=F)
plot(test,type="fan",tip.label=F)
plot(test,type="fan",fsize=0)
plot(test,type="fan",fsize=0.0000001)
ult.tree$tip.label
c(rep("BCS",8),rep("BB",7),rep("OKBC",5),rep("VG",2))
#### CREATE CHARACTER VECTOR ####
chars <- c(rep("BCS",8),rep("BB",7),rep("OKBC",5),rep("VG",2))
names(chars) <- ult.tree$tip.label
#### BUILD TRANSITION MATRIX ####
tmat <- matrix(data=c(0,1,0,0,
0,0,1,1,
0,0,0,0,
0,0,0,0),nrow=4)
View(tmat)
#### BUILD TRANSITION MATRIX ####
tmat <- matrix(data=c(0,1,0,0,
0,0,1,1,
0,0,0,0,
0,0,0,0),nrow=4,byrow = T)
colnames(tmat) <- c("VG","OKBC","BB","BCS")
rownames(tmat) <- c("VG","OKBC","BB","BCS")
test <- make.simmap(ult.tree,chars,model=tmat)
plot(test)
test <- make.simmap(ult.tree,chars,model=tmat)
plot(test)
test <- make.simmap(ult.tree,chars,model=tmat)
plot(test)
test <- make.simmap(ult.tree,chars,model=tmat)
plot(test)
test <- make.simmap(ult.tree,chars,model=tmat)
plot(test)
test <- make.simmap(ult.tree,chars,model=tmat)
plot(test)
test <- make.simmap(ult.tree,chars,model=tmat)
plot(test)
tmat
tmat <- matrix(data=c(0,0,0,0,
0,0,0,0,
1,1,0,0,
0,0,1,0),nrow=4,byrow = T)
colnames(tmat) <- c("VG","OKBC","BB","BCS")
rownames(tmat) <- c("VG","OKBC","BB","BCS")
test <- make.simmap(ult.tree,chars,model=tmat)
plot(test)
library(viridis)
viridis(4)
color <- viridis(4)
names(color) <- colnames(tmat)
plot(test,colors=color)
plot(test,colors=color,type="fan",fsize=0.000001)
plot(test,colors=color,type="fan",fsize=0.000001)
add.simmap.legend(leg=names(color),colors=color)
plot(test,colors=color,type="fan",fsize=0.000001)
add.simmap.legend(leg=names(color),colors=color)
plot(test,colors=color,type="fan",fsize=0.000001)
add.simmap.legend(leg=names(color),colors=color)
source("~/Documents/My stuff/proutFest20203/MrBayes/bbsimmap.R")
color
plot(test,colors=color,type="fan",fsize=0.000001)
add.simmap.legend(leg=c("Meta","Nonsensical","BB","BCS"),colors=color)
plot(test,colors=color,type="fan",fsize=0.000001)
add.simmap.legend(leg=c("Meta","Nonsensical","BB","BCS"),colors=color)
plot(test,colors=color,type="fan",fsize=0.000001)
add.simmap.legend(leg=c("Meta","Nonsensical","BB","BCS"),colors=color)
plot(test,colors=color,type="fan",fsize=0.000001)
add.simmap.legend(leg=c("Meta","Nonsensical","BB","BCS"),colors=color)
